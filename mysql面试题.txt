1.MySQL为什么一定需要设置主键
	主键(primary key)保证每一列或者一组列有唯一的标识.,其值可以区分表的每一行.
	没有主键在更新或者删除表中特定行很困难,因为没有安全的方法保证只涉及特定的行.
2.MySQL你们主键使用自增还是UUID?
	自增的优点:1.储存空间很小
		2.性能最好.
		3.容易记忆.
	自增的缺点:
		1.如果储存的数据量比较大的时候容易出现超出范围.
		2.安全性比较低,因为都是比较有规律的.
		3.很难处理分布式储存的数据表,尤其在合并表的情况下.
	UUID的优点:
		1.具有全球性的唯一id,出现重复的可能性很小.
		2.适合大量数据的插入和跟新.操作,尤其是高并发的和分布式情况下.
		3.跨服务器合并数据非常方便.
		4.安全性能非常的高.
	UUID的缺点:
		1.储存空间非常的发,非常的占磁盘空间.
		2.会降低性能.
		3.很难记忆.
3.自增主机用完了怎么办?
		将int类型的主键改为bigint类型就可以了.
4.主键为什么不推荐有业务含义?
		表通过主键来保证每一列数据有唯一性.所以应该不具有业务的含义,因为任何有业务的含义的列都有改变的可能,.
		主键一旦发生改变,保存在磁盘上的数据也也会发生位置上的改变,有可能会产生页面分裂,
		还有就是带有业务的主键,不一定是顺序自增的,那么就会导致数据的插入顺序并不能保证后面插入的数据主键比前面的数据的大.
5.5、货币字段用什么类型?？
		使用decimal类型
		float或者doulbe在数据较大的时候有可能数据丢失.
6:时间字段用什么类型?
		这个需要看具体使用场景,datatime,timestamp,bigint都是可以的.
		datatime:八个字节.他的储存范围在1000.1.1~~9999.12.31存储范围更大.他储存的是时间绝对值,不带时区信息的.如果改变数据库
		的时区,该项的值不会自身发生改变的.
		timestamp:四个字节,他的储存空间范围在19701-1~~2038-12-31,他的储存范围比较小,它带有时间时区的,例如你修改了数据库的时区,
		他会自动改变时区的.
		bigint也是八个字节.自己维护一个时间戳,查询效率比较高,不过数据写入的时候,显示需要做转换.
7:为什么不直接存储图片、音频、视频等大容量内容?
		我们在实际应用中，都是文件形式存储的。mysql中，只存文件的存放路径。
		虽然mysql中blob类型可以用来存放大容量文件，但是，我们在生产中，基本不用！
8:表中有大字段X(例如：text类型)，且字段X不会经常更新，以读为主，那么是拆成子表好？还是放一起好？
		其实各有利弊吧,拆开带来链接消耗,不拆开带来的问题是,查询效率比较缓慢,如果表的数据量比较的的时候还是拆开尾号,查询效率比较好.
9:字段为什么要定义为NOT NULL?
		一般情况下都会设置一个默认值,不会出现字段里面为null,如果为null,主要要一下几个原因
		1. 索引性能不好，Mysql难以优化引用可空列查询，它会使索引、索引统计和值更加复杂。
		可空列需要更多的存储空间，还需要mysql内部进行特殊处理。
		可空列被索引后，每条记录都需要一个额外的字节，还能导致MYisam 中固定大小的索引变成可变大小的索引
		2. 如果某列存在null的情况，可能导致count() 等函数执行不对的情况
		3.sql 语句写着也麻烦，既要判断是否为空，又要判断是否为null等。
10:where执行顺序是怎样的？
		where条件执行的时候是从左到右执行的,日过数据库中的数据比较少的时候不需要考虑顺序,如果数据量比较大的时候
		考虑排除越多的条件放在前面.
11:应该在这些列上创建索引：
		在经常需要搜索的列上，可以加快搜索的速度；在作为主键的列上，强制该列的唯一性和组织表中数据的排列结构；
		在经常用在连接的列上，这些列主要是一些外键，可以加快连接的速度；
		在经常需要根据范围进行搜索的列上创建索引，因为索引已经排序，其指定的范围是连续的；
		在经常需要排序的列上创建索引，因为索引已经排序，这样查询可以利用索引的排序，加快排序查询时间；
		在经常使用在WHERE子句中的列上面创建索引，加快条件的判断速度。
14:什么情况下应不建或少建索引

		表记录太少
		经常插入、删除、修改的表
		数据重复且分布平均的表字段，假如一个表有10万行记录，有一个字段A只有T和F两种值，且每个值的分布概率大约为50%，那么对这种表A字段建索引一般不会提高数据库的查询速度。
		经常和主字段一块查询但主字段索引值比较多的表字段
		
		